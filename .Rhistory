scale_y_continuous() +
scale_x_continuous(breaks = scales::pretty_breaks(5)) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5, size = 10, color = "darkblue"),
plot.caption = element_text(hjust = 1, face = "italic", size = 4, color = "darkgray"),
axis.title.x = element_text(face = "bold", color = "darkblue", size = 6),
axis.title.y = element_text(face = "bold", color = "darkblue", size = 6),
axis.text = element_text(size = 6, color = "black"),
panel.grid.major = element_line(color = "lightgray", linetype = "dashed"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white", color = NA)
)
#POD Cameras
plot3 <-ggplot(combined, aes(x = `POD.Cameras`, y = `countAssaults`)) +
geom_point(color = "dodgerblue", alpha = 0.6, size = 3) +
geom_smooth(method = "lm", color = "red", se = FALSE, linetype = "dashed") +
labs(
title = "CCTV vs Assaults Count",
x = "Number of Cameras",
y = "Number of Assaults",
caption = "Figure 3. Relationship between POD Camera and Assaults Count"
) +
scale_y_continuous() +
scale_x_continuous() +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5, size = 10, color = "darkred"),
plot.caption = element_text(hjust = 1, face = "italic", size = 4, color = "darkgray"),
axis.title.x = element_text(face = "bold", color = "darkblue", size = 6),
axis.title.y = element_text(face = "bold", color = "darkblue", size = 6),
axis.text = element_text(size = 6, color = "black"),
panel.grid.major = element_line(color = "lightgray", linetype = "dashed"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white", color = NA)
)
#Street Lights Out
plot4 <- ggplot(combined, aes(x = `Street_Lights_Out`, y = `countAssaults`)) +
geom_point(color = "dodgerblue", alpha = 0.6, size = 3) +
geom_smooth(method = "lm", color = "red", se = FALSE, linetype = "dashed") +
labs(
title = "Street Lights Out vs Assaults Count",
x = "Number of Street Lights Out",
y = "Number of Assaults",
caption = "Figure 3. Relationship between Street Lights Out and Assaults Count"
) +
scale_y_continuous() +
scale_x_continuous() +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5, size = 10, color = "darkgreen"),
plot.caption = element_text(hjust = 1, face = "italic", size = 4, color = "darkgray"),
axis.title.x = element_text(face = "bold", color = "darkblue", size = 6),
axis.title.y = element_text(face = "bold", color = "darkblue", size = 6),
axis.text = element_text(size = 6, color = "black"),
panel.grid.major = element_line(color = "lightgray", linetype = "dashed"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white", color = NA)
)
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
numericVars <-
select_if(st_drop_geometry(combined), is.numeric) %>% na.omit()
#EDIT LATER
colnames(numericVars) <- c("Sale Price", "Liquor Retail", "POD Camera",
"Street Lights Out", "Metra Stops")
ggcorrplot(
round(cor(numericVars), 1),
p.mat = cor_pmat(numericVars),
colors = c("#01016f", "white", "#d8031c"),
type = "lower",
insig = "blank",
lab = TRUE,
lab_size = 3,
outline.color = "gray"
)
library(ggcorrplot)
ggcorrplot(
+     round(cor(numericVars), 1),
+     p.mat = cor_pmat(numericVars),
st_c <- st_coordinates
st_coid <- st_centroid
vars_net <-
vars_net %>%
mutate(
cctv.nn =
nn_function(st_c(st_coid(vars_net)), st_c(cctv),3),
Liquor_Retail.nn =
nn_function(st_c(st_coid(vars_net)), st_c(liquorRetail),3),
Street_Lights_Out.nn =
nn_function(st_c(st_coid(vars_net)), st_c(streetLightsOut),3),
metraStops.nn =
nn_function(st_c(st_coid(vars_net)), st_c(metraStops),3))
vars_net.long.nn <-
dplyr::select(vars_net, ends_with(".nn")) %>%
gather(Variable, value, -geometry)
vars <- unique(vars_net.long.nn$Variable)
mapList <- list()
for(i in vars){
mapList[[i]] <-
ggplot() +
geom_sf(data = filter(vars_net.long.nn, Variable == i), aes(fill=value), colour=NA) +
scale_fill_viridis(name="") +
labs(title=i) +
mapTheme()}
do.call(grid.arrange,c(mapList, ncol = 2, top = "Nearest Neighbor risk Factors by Fishnet"))
loopPoint <-
filter(neighborhoods, name == "Loop") %>%
st_centroid()
vars_net$loopDistance =
st_distance(st_centroid(vars_net),loopPoint) %>%
as.numeric()
ggplot() +
geom_sf(data = vars_net, aes(fill = loopDistance), color = NA) +
scale_fill_viridis_c(option = "plasma", name = "Distance to Loop (m)") +
labs(title = "Euclidean Distance to the Loop",
caption = "Distance measured in meters") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5))
final_net <-
left_join(crime_net, st_drop_geometry(vars_net), by="uniqueID")
View(final_net)
final_net <-
left_join(crime_net, st_drop_geometry(vars_net), by="uniqueID")
final_net <-
st_centroid(final_net) %>%
st_join(dplyr::select(neighborhoods, name)) %>%
st_join(dplyr::select(policeDistricts, District)) %>%
st_drop_geometry() %>%
left_join(dplyr::select(final_net, geometry, uniqueID)) %>%
st_sf() %>%
na.omit()
grid.arrange(ncol=2,
ggplot() +
geom_sf(data = final_net, aes(fill=District)) +
scale_fill_viridis_d(option = "plasma") +
labs(title="Police Districts") +
mapTheme()+
theme(legend.position = "none"),
ggplot() +
geom_sf(data = final_net, aes(fill=name)) +
scale_fill_viridis_d(option = "plasma") +
labs(title="Neighborhoods") +
mapTheme()+
theme(legend.position = "none"))
final_net.nb <- poly2nb(as_Spatial(final_net), queen=TRUE)
final_net.weights <- nb2listw(final_net.nb, style="W", zero.policy=TRUE)
print(final_net.weights, zero.policy=TRUE)
local_morans <- localmoran(final_net$countAssaults, final_net.weights, zero.policy=TRUE) %>%                 as.data.frame()
# join local Moran's I results to fishnet
final_net.localMorans <-
cbind(local_morans, as.data.frame(final_net)) %>%
st_sf() %>%
dplyr::select(Assaults_Count = countAssaults,
Local_Morans_I = Ii,
P_Value = `Pr(z != E(Ii))`) %>%
mutate(Significant_Hotspots = ifelse(P_Value <= 0.001, 1, 0)) %>%
gather(Variable, Value, -geometry)
vars <- unique(final_net.localMorans$Variable)
varList <- list()
for(i in vars){
varList[[i]] <-
ggplot() +
geom_sf(data = filter(final_net.localMorans, Variable == i),
aes(fill = Value), colour=NA) +
scale_fill_viridis(option = "plasma", name="") +
labs(title=i) +
mapTheme() + theme(legend.position="bottom")}
do.call(grid.arrange,c(varList, ncol = 4, top = "Local Morans I statistics, Assaults"))
final_net.localMoransbypval <-
cbind(local_morans, as.data.frame(final_net)) %>%
st_sf() %>%
dplyr::select(Assaults_Count = countAssaults,
Local_Morans_I = Ii,
P_Value = `Pr(z != E(Ii))`) %>%
mutate(Significant_Hotspots0.1 = ifelse(P_Value <= 0.1 , 1, 0)) %>%
mutate(Significant_Hotspots0.001 = ifelse(P_Value <= 0.001 , 1, 0)) %>%
mutate(Significant_Hotspots0.00001 = ifelse(P_Value <= 0.00001 , 1, 0)) %>%
mutate(Significant_Hotspots0.0000001 = ifelse(P_Value <= 0.0000001, 1, 0)) %>%
gather(Variable, Value, -geometry)
final_net.localMoransbypval <- subset(final_net.localMoransbypval, grepl("Significant_Hotspots", Variable))
custom_labels <- c("Significant_Hotspots0.1" = "0.1",
"Significant_Hotspots0.001" = "0.001",
"Significant_Hotspots0.00001" = "0.00001",
"Significant_Hotspots0.0000001" = "0.0000001")
ggplot() +
geom_sf(data = final_net.localMoransbypval,
aes(fill = Value), colour=NA) +
scale_fill_viridis(option = "plasma", name="") +
labs(title="Assaults Hotspots of Varing Significance") +
facet_wrap(~Variable, ncol=4, labeller = labeller(Variable = custom_labels))+
mapTheme(title_size = 14) + theme(legend.position="none")
final_net <- final_net %>%
mutate(assaultscount.isSig =
ifelse(local_morans[,5] <= 0.001, 1, 0)) %>%
mutate(assaultscount.isSig.dist =
nn_function(st_coordinates(st_centroid(final_net)),
st_coordinates(st_centroid(filter(final_net,
assaultscount.isSig == 1))),
k = 1))
ggplot() +
geom_sf(data = final_net, aes(fill=assaultscount.isSig.dist), colour=NA) +
scale_fill_viridis(option = "plasma", name="NN Distance") +
labs(title="Assaults Count NN Distance") +
mapTheme()
reg.vars <- c("cctv.nn", "Street_Lights_Out.nn", "Liquor_Retail.nn",
"metraStops.nn", "loopDistance")
reg.ss.vars <- c("cctv.nn", "Street_Lights_Out.nn", "Liquor_Retail.nn",
"metraStops.nn", "loopDistance", "assaultscount.isSig",
"assaultscount.isSig.dist")
## RUN REGRESSIONS
reg.spatialCV <- crossValidate(
dataset = final_net,
id = "name",
dependentVariable = "countAssaults",
indVariables = reg.vars) %>%
dplyr::select(cvID = name, countAssaults, Prediction, geometry)
reg.ss.spatialCV <- crossValidate(
dataset = final_net,
id = "name",
dependentVariable = "countAssaults",
indVariables = reg.ss.vars) %>%
dplyr::select(cvID = name, countAssaults, Prediction, geometry)
reg.summary <-
rbind(
mutate(reg.spatialCV,    Error = Prediction - countAssaults,
Regression = "Spatial LOGO-CV: Just Risk Factors"),
mutate(reg.ss.spatialCV, Error = Prediction - countAssaults,
Regression = "Spatial LOGO-CV: Spatial Process")) %>%
st_sf()
error_by_reg_and_fold <-
reg.summary %>%
group_by(Regression, cvID) %>%
summarize(Mean_Error = mean(Prediction - countAssaults, na.rm = T),
MAE = mean(abs(Mean_Error), na.rm = T),
SD_MAE = mean(abs(Mean_Error), na.rm = T)) %>%
ungroup()
error_by_reg_and_fold %>%
ggplot(aes(MAE)) +
geom_histogram(bins = 30, colour="black", fill = "#FDE725FF") +
facet_wrap(~Regression) +
geom_vline(xintercept = 0) + scale_x_continuous(breaks = seq(0, 8, by = 1)) +
labs(title="Distribution of MAE", subtitle = "LOGO-CV",
x="Mean Absolute Error", y="Count") +
plotTheme()
error_by_reg_and_fold %>%
filter(str_detect(Regression, "LOGO")) %>%
ggplot() +
geom_sf(aes(fill = MAE)) +
facet_wrap(~Regression) +
scale_fill_viridis(option = "plasma") +
labs(title = "Assaults errors by LOGO-CV Regression") +
mapTheme() + theme(legend.position="bottom")
st_drop_geometry(error_by_reg_and_fold) %>%
group_by(Regression) %>%
summarize(Mean_MAE = round(mean(MAE), 2),
SD_MAE = round(sd(MAE), 2)) %>%
kable() %>%
kable_styling("striped", full_width = F)
reg.vars.full <- c("cctv.nn", "Street_Lights_Out.nn", "Liquor_Retail.nn", "metraStops.nn", "loopDistance")
# Models excluding one variable at a time
reg.vars.no_cctv <- setdiff(reg.vars.full, "cctv.nn")
reg.vars.no_street_lights <- setdiff(reg.vars.full, "Street_Lights_Out.nn")
reg.vars.no_liquor <- setdiff(reg.vars.full, "Liquor_Retail.nn")
reg.vars.no_metra <- setdiff(reg.vars.full, "metraStops.nn")
# List of models to evaluate
models <- list(
"Full Model" = reg.vars.full,
"No CCTV" = reg.vars.no_cctv,
"No Street Lights" = reg.vars.no_street_lights,
"No Liquor Retail" = reg.vars.no_liquor,
"No Metra Stops" = reg.vars.no_metra
)
model_results <- lapply(names(models), function(model_name) {
vars <- models[[model_name]]
model_cv <- crossValidate(
dataset = final_net,
id = "name",
dependentVariable = "countAssaults",
indVariables = vars
) %>%
dplyr::select(cvID = name, countAssaults, Prediction, geometry)
model_summary <- model_cv %>%
mutate(Error = Prediction - countAssaults) %>%
summarize(
MAE = mean(abs(Error), na.rm = TRUE)
)
return(data.frame(Model = model_name, MAE = model_summary$MAE))
})
model_summary <- model_cv %>%
mutate(Error = Prediction - countAssaults) %>%
summarize(
MAE = mean(abs(Error), na.rm = TRUE)
)
model_cv <- crossValidate(
dataset = final_net,
id = "name",
dependentVariable = "countAssaults",
indVariables = vars
) %>%
dplyr::select(cvID = name, countAssaults, Prediction, geometry)
model_results <- lapply(names(models), function(model_name) {
vars <- models[[model_name]]
View(model_results)
View(model_results)
View(model_results)
View(models)
View(models)
View(model_results)
model_results <- lapply(names(models), function(model_name) {
vars <- models[[model_name]]
# Run cross-validation for each model
model_cv <- crossValidate(
dataset = final_net,
id = "name",
dependentVariable = "countAssaults",
indVariables = vars
) %>%
dplyr::select(cvID = name, countAssaults, Prediction, geometry)
# Calculate MAE
model_summary <- model_cv %>%
mutate(Error = Prediction - countAssaults) %>%
summarize(
MAE = mean(abs(Error), na.rm = TRUE)
)
return(data.frame(Model = model_name, MAE = model_summary$MAE))
})
model_results_df <- do.call(rbind, model_results)
model_results_df %>%
kable(caption = "Comparison of MAE for Different Models") %>%
kable_styling("striped", full_width = F)
print(model_results_df)
model_results_df <- do.call(rbind, model_results)
model_results_df <- do.call(rbind, model_results)
# Display the results
model_results_df %>%
kable(caption = "Comparison of MAE for Different Models") %>%
kable_styling("striped", full_width = F)
model_results <- lapply(names(models), function(model_name) {
vars <- models[[model_name]]
# Run cross-validation for each model
model_cv <- crossValidate(
dataset = final_net,
id = "name",
dependentVariable = "countAssaults",
indVariables = vars
) %>%
dplyr::select(cvID = name, countAssaults, Prediction, geometry)
# Calculate MAE
model_summary <- model_cv %>%
mutate(Error = Prediction - countAssaults) %>%
summarize(
MAE = mean(abs(Error), na.rm = TRUE)
)
return(data.frame(Model = model_name, MAE = model_summary$MAE))
})
# Combine all model results
model_results_df <- do.call(rbind, model_results)
# Display the results
model_results_df %>%
kable(caption = "Comparison of MAE for Different Models") %>%
kable_styling("striped", full_width = F)
)
model_results <- lapply(names(models), function(model_name) {
vars <- models[[model_name]]
# Run cross-validation for each model
model_cv <- crossValidate(
dataset = final_net,
id = "name",
dependentVariable = "countAssaults",
indVariables = vars
) %>%
dplyr::select(cvID = name, countAssaults, Prediction, geometry)
# Calculate MAE
model_summary <- model_cv %>%
mutate(Error = Prediction - countAssaults) %>%
summarize(
MAE = mean(abs(Error), na.rm = TRUE)
)
return(data.frame(Model = model_name, MAE = model_summary$MAE))
})
# Combine all model results
model_results_df <- do.call(rbind, model_results)
# Display the results
model_results_df %>%
kable(caption = "Comparison of MAE for Different Models") %>%
kable_styling("striped", full_width = F)
assaults <-
read.socrata("https://data.cityofchicago.org/Public-Safety/Crimes-2017/d62x-nvdr")
assaults <-
read.socrata("https://data.cityofchicago.org/Public-Safety/Crimes-2017/d62x-nvdr") %>%
filter(Primary.Type == "ASSAULT" & Description == "SIMPLE") %>%
mutate(x = gsub("[()]", "", Location)) %>%
separate(x,into= c("Y","X"), sep=",") %>%
mutate(X = as.numeric(X),Y = as.numeric(Y)) %>%
na.omit() %>%
st_as_sf(coords = c("X", "Y"), crs = 4326, agr = "constant")%>%
st_transform('ESRI:102271') %>%
distinct()
View(bothPoliceUnits)
final_net <-
st_centroid(final_net) %>%
st_join(dplyr::select(neighborhoods, name)) %>%
st_join(dplyr::select(bothPoliceUnits, District)) %>%
st_drop_geometry() %>%
left_join(dplyr::select(final_net, geometry, uniqueID)) %>%
st_sf() %>%
na.omit()
grid.arrange(ncol=2,
ggplot() +
geom_sf(data = final_net, aes(fill=District)) +
scale_fill_viridis_d(option = "plasma") +
labs(title="Police Districts") +
mapTheme()+
theme(legend.position = "none"),
ggplot() +
geom_sf(data = final_net, aes(fill=name)) +
scale_fill_viridis_d(option = "plasma") +
labs(title="Neighborhoods") +
mapTheme()+
theme(legend.position = "none"))
View(final_net)
final_net <-
st_centroid(final_net) %>%
st_join(dplyr::select(neighborhoods, name)) %>%
st_join(dplyr::select(policeDistricts, District)) %>%
st_drop_geometry() %>%
left_join(dplyr::select(final_net, geometry, uniqueID)) %>%
st_sf() %>%
na.omit()
grid.arrange(ncol=2,
ggplot() +
geom_sf(data = final_net, aes(fill=District)) +
scale_fill_viridis_d(option = "plasma") +
labs(title="Police Districts") +
mapTheme()+
theme(legend.position = "none"),
ggplot() +
geom_sf(data = final_net, aes(fill=name)) +
scale_fill_viridis_d(option = "plasma") +
labs(title="Neighborhoods") +
mapTheme()+
theme(legend.position = "none"))
metraStops <- st_read("data/MetraStations.shp") %>%
filter(MUNICIPALI == "Chicago") %>%
st_as_sf(coords = c("X", "Y"), crs = 4326, agr = "constant") %>%
st_transform(st_crs(fishnet)) %>%
dplyr::select(geometry) %>%
mutate(Legend = "Metra Stops")
metraStops <-  st_cast(metraStops, "POINT")
cctv <- st_read("data/chicago_pod_cameras_031816.geojson") %>%
st_as_sf(coords = c("X", "Y"), crs = 4326, agr = "constant") %>%
st_transform(st_crs(fishnet)) %>%
dplyr::select(geometry) %>%
mutate(Legend = "POD Cameras")
streetLightsOut <-
read.socrata("https://data.cityofchicago.org/Service-Requests/311-Service-Requests-Street-Lights-All-Out/zuxi-7xem") %>%
mutate(year = substr(creation_date,1,4)) %>% filter(year == "2017") %>%
dplyr::select(Y = latitude, X = longitude) %>%
na.omit() %>%
st_as_sf(coords = c("X", "Y"), crs = 4326, agr = "constant") %>%
st_transform(st_crs(fishnet)) %>%
mutate(Legend = "Street_Lights_Out")
liquorRetail <-
read.socrata("https://data.cityofchicago.org/resource/nrmj-3kcf.json") %>%
filter(business_activity == "Retail Sales of Packaged Liquor") %>%
dplyr::select(Y = latitude, X = longitude) %>%
na.omit() %>%
st_as_sf(coords = c("X", "Y"), crs = 4326, agr = "constant") %>%
st_transform(st_crs(fishnet)) %>%
mutate(Legend = "Liquor_Retail")
neighborhoods <-
st_read("https://raw.githubusercontent.com/blackmad/neighborhoods/master/chicago.geojson") %>%
st_transform(st_crs(fishnet))
combined_sf <- rbind(metraStops, cctv, streetLightsOut, liquorRetail)
chicago_base_map <- ggplot() +
geom_sf(data = chicagoBoundary, fill = "white", color = "black") +
theme_void()
combined_map <- chicago_base_map +
geom_sf(data = combined_sf, aes(color = Legend), size = 0.25, alpha = 0.7) +
facet_wrap(~ Legend) +
labs(title = "Risk Factors, Points") +
theme(legend.position = "none",
strip.background = element_rect(fill = "gray"),
strip.text = element_text(size = 10, face = "bold"))
print(combined_map)
View(assa_risk_sf)
correlation.long <-
st_drop_geometry(final_net) %>%
dplyr::select(-uniqueID, -cvID, -loopDistance, -name, -District) %>%
gather(Variable, Value, -countAssaults)
correlation.cor <-
correlation.long %>%
group_by(Variable) %>%
summarize(correlation = cor(Value, countAssaults, use = "complete.obs"))
View(correlation.long)
correlation.long <-
st_drop_geometry(final_net) %>%
dplyr::select(-uniqueID, -cvID, -loopDistance, -name, -District, -District.x, -District.y) %>%
gather(Variable, Value, -countAssaults)
correlation.cor <-
correlation.long %>%
group_by(Variable) %>%
summarize(correlation = cor(Value, countAssaults, use = "complete.obs"))
View(correlation.long)
correlation.long <-
st_drop_geometry(final_net) %>%
dplyr::select(countAssaults, Liquor_Retail,
Metra.Stops, POD.Cameras,
Street_Lights_Out %>%
gather(Variable, Value, -countAssaults)
View(correlation.long)
View(correlation.long)
